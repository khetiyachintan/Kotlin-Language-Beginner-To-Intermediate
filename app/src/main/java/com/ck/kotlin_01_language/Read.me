# ðŸ’« Kotlin Language Beginner to Intermediate

ðŸŽ¯I'm on a mission to learn all about Kotlin and share with the community, a cool programming language! I started by learning the basics, like how to write simple code. As I got better, I discovered more advanced stuff like making my code work better and play nicely with other programs. I love how Kotlin makes writing code easier and more fun! Let's explore Kotlin together and see what amazing things we can create!âœ¨ðŸ’¡

## What is Kotlin?

âžž Kotlin is a modern but already mature programming language designed to make developers happier.

âžž It's concise, safe, interoperable with Java and other languages, and provides many ways to reuse code between multiple platforms for productive programming.

## Kotlin History

```bash
ðŸ“† Year 2016 ==> 1.1
ðŸ“† Year 2017 ==> 1.2
ðŸ“† Year 2018 ==> 1.3
ðŸ“† Year 2020 ==> 1.4.0
ðŸ“† Year 2021 ==> 1.5.0, 1.6.0
ðŸ“† Year 2022 ==> 1.7.0, 1.8.0
ðŸ“† Year 2023 ==> 1.9.0, 1. 9.2 (Latest till Apr 2024)
```

## Kotlin is for...

```
âœ…Native
âœ…Android
âœ…Cross-platform
âœ…Server Side
âœ…Java Script
âœ…WASM
âœ…Data Science
âœ…Competitive Programming
```

## Native

âžž Kotlin/Native is a technology for compiling Kotlin code to native binaries that can run without a virtual machine. Kotlin/Native includes anÂ LLVM-based backend for the Kotlin compiler and a native implementation of the Kotlin standard library.

```
âœ… macOS
âœ…iOS, tvOS, watchOS
âœ…Linux
âœ…Windows (MinGW)
âœ…Android NDK
```

## Android

âžž Android mobile development has beenÂ Kotlin-firstÂ since Google I/O in 2019

```
âœ… Less code
âœ… Greater readability
âœ… Fewer common errors
âœ… Kotlin support in Jetpack librariesÂ 
âœ… Mature languageÂ 
âœ… Interoperability with Java
âœ… Easy learning
âœ… Big community
```

## Cross Platform

âžž The Kotlin Multiplatform technology is designed to simplify the development of cross-platform projects. i.e., Server, Android, iOS, Desktop, Web.

```
âœ… UI - Compose Multiplatform
âœ… Presentation
âœ… Business / Domain
âœ… Data / Core
```

## Server Side

âžž Kotlin is a great fit for developing server-side applications. It allows you to write concise and expressive code while maintaining full compatibility with existing Java-based technology stacks, all with a smooth learning curve.

```
âœ… Expressiveness
âœ… Scalability
âœ… Interoperability
âœ… Migration
âœ… Tooling
âœ… Learning Curve
```

## Java Script

âžž Kotlin/JS provides the ability to transpile your Kotlin code, the Kotlin standard library, and any compatible dependencies to JavaScript. The current implementation of Kotlin/JS targetsÂ ES5.

```
âœ… Kotlin/JS IR compilerï»¿
âœ… Kotlin/JS frameworksï»¿
âœ… KVisionï»¿
âœ… fritz2ï»¿
âœ… Doodleï»¿
```

## WASM

âžž You have the power to build applications and reuse mobile and desktop user interfaces (UIs) in your web projects through Compose Multiplatform and Kotlin/Wasm.

## Data Science

âžž From building data pipelines to productionizing machine learning models, Kotlin can be a great choice for working with data.

```
âœ… Kotlin Notebook
âœ… Jupyter Notebook
âœ… Datalore
```

## Competitive Programming

âžž Competitive programming is a mind sport where contestants write programs to solve precisely specified algorithmic problems within strict constraints.

```
âœ… Problem Complexity
âœ… Kotlin's Suitability
âœ… Reduced Boilerplate
âœ… Tooling and Performance
```

# Basics

âžž Let's understand the basics of Kotlin
```
âœ… Package
âœ… Import
âœ… Main
âœ… Println
âœ… Function
âœ… Variables
âœ… Comments
âœ… String templates
âœ… Range
âœ… Collections
âœ… Lambda function
âœ… Idioms
```

# Fundamental Concepts

âžž Let's understand the fundamental concepts i.e Types, Control Flow, Classes and Objects, Functions, Builders and others.
## Types
```
âœ… Basic types
âœ… Overview
âœ… Numbers
âœ… Unsigned integer types
âœ… Booleans
âœ… Characters
âœ… Strings
âœ… Arrays
```

## Control Flow
```
âœ… Conditions and loops
âœ… Returns and jumps
âœ… Exceptions
```


## Classes and Objects
```
âœ… Classes
âœ… Inheritance
âœ… Properties
âœ… Interfaces
âœ… Functional (SAM) interfaces
âœ… Visibility modifiers
âœ… Extensions
âœ… Data classes
âœ… Sealed classes and interfaces
âœ… Generics: in, out, were
âœ… Nested and inner classes
âœ… Enum classes
âœ… Inline value classes
âœ… Object expressions and declarations
âœ… Delegation
âœ… Delegated properties
âœ… Type aliases
```

## Functions
```
âœ… Lambdas
âœ… Inline functions
âœ… Operator overloading
```

## Builders
```
âœ… 	Type-safe builders
âœ… Using builders with builder-type inference
```

## Others
```
âœ… 	Null safety
âœ… Equality
âœ… This expression
```


## License

[MIT](https://choosealicense.com/licenses/mit/)